//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DAL.DataEntities
{
    public partial class Relation : IDataEntity
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual int RelationTypeID
        {
            get { return _relationTypeID; }
            set
            {
                if (_relationTypeID != value)
                {
                    if (Relation_Type != null && Relation_Type.ID != value)
                    {
                        Relation_Type = null;
                    }
                    _relationTypeID = value;
                }
            }
        }
        private int _relationTypeID;
    
        public virtual int ParentFeatureID
        {
            get { return _parentFeatureID; }
            set
            {
                if (_parentFeatureID != value)
                {
                    if (ParentFeature != null && ParentFeature.ID != value)
                    {
                        ParentFeature = null;
                    }
                    _parentFeatureID = value;
                }
            }
        }
        private int _parentFeatureID;
    
        public virtual int ChildFeatureID
        {
            get { return _childFeatureID; }
            set
            {
                if (_childFeatureID != value)
                {
                    if (ChildFeature != null && ChildFeature.ID != value)
                    {
                        ChildFeature = null;
                    }
                    _childFeatureID = value;
                }
            }
        }
        private int _childFeatureID;
    
        public virtual int ModelID
        {
            get { return _modelID; }
            set
            {
                if (_modelID != value)
                {
                    if (Model != null && Model.ID != value)
                    {
                        Model = null;
                    }
                    _modelID = value;
                }
            }
        }
        private int _modelID;
    
        public virtual Nullable<int> LowerBound
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UpperBound
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Relation_Type Relation_Type
        {
            get { return _relation_Type; }
            set
            {
                if (!ReferenceEquals(_relation_Type, value))
                {
                    var previousValue = _relation_Type;
                    _relation_Type = value;
                    FixupRelation_Type(previousValue);
                }
            }
        }
        private Relation_Type _relation_Type;
    
        public virtual Model Model
        {
            get { return _model; }
            set
            {
                if (!ReferenceEquals(_model, value))
                {
                    var previousValue = _model;
                    _model = value;
                    FixupModel(previousValue);
                }
            }
        }
        private Model _model;
    
        public virtual Feature ChildFeature
        {
            get { return _childFeature; }
            set
            {
                if (!ReferenceEquals(_childFeature, value))
                {
                    var previousValue = _childFeature;
                    _childFeature = value;
                    FixupChildFeature(previousValue);
                }
            }
        }
        private Feature _childFeature;
    
        public virtual Feature ParentFeature
        {
            get { return _parentFeature; }
            set
            {
                if (!ReferenceEquals(_parentFeature, value))
                {
                    var previousValue = _parentFeature;
                    _parentFeature = value;
                    FixupParentFeature(previousValue);
                }
            }
        }
        private Feature _parentFeature;

        #endregion
        #region Association Fixup
    
        private void FixupRelation_Type(Relation_Type previousValue)
        {
            if (previousValue != null && previousValue.Relations.Contains(this))
            {
                previousValue.Relations.Remove(this);
            }
    
            if (Relation_Type != null)
            {
                if (!Relation_Type.Relations.Contains(this))
                {
                    Relation_Type.Relations.Add(this);
                }
                if (RelationTypeID != Relation_Type.ID)
                {
                    RelationTypeID = Relation_Type.ID;
                }
            }
        }
    
        private void FixupModel(Model previousValue)
        {
            if (previousValue != null && previousValue.Relations.Contains(this))
            {
                previousValue.Relations.Remove(this);
            }
    
            if (Model != null)
            {
                if (!Model.Relations.Contains(this))
                {
                    Model.Relations.Add(this);
                }
                if (ModelID != Model.ID)
                {
                    ModelID = Model.ID;
                }
            }
        }
    
        private void FixupChildFeature(Feature previousValue)
        {
            if (previousValue != null && previousValue.Relations.Contains(this))
            {
                previousValue.Relations.Remove(this);
            }
    
            if (ChildFeature != null)
            {
                if (!ChildFeature.Relations.Contains(this))
                {
                    ChildFeature.Relations.Add(this);
                }
                if (ChildFeatureID != ChildFeature.ID)
                {
                    ChildFeatureID = ChildFeature.ID;
                }
            }
        }
    
        private void FixupParentFeature(Feature previousValue)
        {
            if (previousValue != null && previousValue.Relations1.Contains(this))
            {
                previousValue.Relations1.Remove(this);
            }
    
            if (ParentFeature != null)
            {
                if (!ParentFeature.Relations1.Contains(this))
                {
                    ParentFeature.Relations1.Add(this);
                }
                if (ParentFeatureID != ParentFeature.ID)
                {
                    ParentFeatureID = ParentFeature.ID;
                }
            }
        }

        #endregion
    }
}
