//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DAL.DataEntities
{
    public partial class FeatureGroup : IDataEntity
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual int ModelID
        {
            get { return _modelID; }
            set
            {
                if (_modelID != value)
                {
                    if (Model != null && Model.ID != value)
                    {
                        Model = null;
                    }
                    _modelID = value;
                }
            }
        }
        private int _modelID;
    
        public virtual int ParentFeatureID
        {
            get { return _parentFeatureID; }
            set
            {
                if (_parentFeatureID != value)
                {
                    if (ParentFeature != null && ParentFeature.ID != value)
                    {
                        ParentFeature = null;
                    }
                    _parentFeatureID = value;
                }
            }
        }
        private int _parentFeatureID;
    
        public virtual int FeatureGroupTypeID
        {
            get { return _featureGroupTypeID; }
            set
            {
                if (_featureGroupTypeID != value)
                {
                    if (FeatureGroup_Type != null && FeatureGroup_Type.ID != value)
                    {
                        FeatureGroup_Type = null;
                    }
                    _featureGroupTypeID = value;
                }
            }
        }
        private int _featureGroupTypeID;
    
        public virtual Nullable<int> LowerBound
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UpperBound
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual FeatureGroup_Type FeatureGroup_Type
        {
            get { return _featureGroup_Type; }
            set
            {
                if (!ReferenceEquals(_featureGroup_Type, value))
                {
                    var previousValue = _featureGroup_Type;
                    _featureGroup_Type = value;
                    FixupFeatureGroup_Type(previousValue);
                }
            }
        }
        private FeatureGroup_Type _featureGroup_Type;
    
        public virtual Feature ParentFeature
        {
            get { return _parentFeature; }
            set
            {
                if (!ReferenceEquals(_parentFeature, value))
                {
                    var previousValue = _parentFeature;
                    _parentFeature = value;
                    FixupParentFeature(previousValue);
                }
            }
        }
        private Feature _parentFeature;
    
        public virtual Model Model
        {
            get { return _model; }
            set
            {
                if (!ReferenceEquals(_model, value))
                {
                    var previousValue = _model;
                    _model = value;
                    FixupModel(previousValue);
                }
            }
        }
        private Model _model;
    
        public virtual ICollection<Feature> ChildFeatures
        {
            get
            {
                if (_childFeatures == null)
                {
                    var newCollection = new FixupCollection<Feature>();
                    newCollection.CollectionChanged += FixupChildFeatures;
                    _childFeatures = newCollection;
                }
                return _childFeatures;
            }
            set
            {
                if (!ReferenceEquals(_childFeatures, value))
                {
                    var previousValue = _childFeatures as FixupCollection<Feature>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildFeatures;
                    }
                    _childFeatures = value;
                    var newValue = value as FixupCollection<Feature>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildFeatures;
                    }
                }
            }
        }
        private ICollection<Feature> _childFeatures;

        #endregion
        #region Association Fixup
    
        private void FixupFeatureGroup_Type(FeatureGroup_Type previousValue)
        {
            if (previousValue != null && previousValue.FeatureGroups.Contains(this))
            {
                previousValue.FeatureGroups.Remove(this);
            }
    
            if (FeatureGroup_Type != null)
            {
                if (!FeatureGroup_Type.FeatureGroups.Contains(this))
                {
                    FeatureGroup_Type.FeatureGroups.Add(this);
                }
                if (FeatureGroupTypeID != FeatureGroup_Type.ID)
                {
                    FeatureGroupTypeID = FeatureGroup_Type.ID;
                }
            }
        }
    
        private void FixupParentFeature(Feature previousValue)
        {
            if (previousValue != null && previousValue.FeatureGroups.Contains(this))
            {
                previousValue.FeatureGroups.Remove(this);
            }
    
            if (ParentFeature != null)
            {
                if (!ParentFeature.FeatureGroups.Contains(this))
                {
                    ParentFeature.FeatureGroups.Add(this);
                }
                if (ParentFeatureID != ParentFeature.ID)
                {
                    ParentFeatureID = ParentFeature.ID;
                }
            }
        }
    
        private void FixupModel(Model previousValue)
        {
            if (previousValue != null && previousValue.FeatureGroups.Contains(this))
            {
                previousValue.FeatureGroups.Remove(this);
            }
    
            if (Model != null)
            {
                if (!Model.FeatureGroups.Contains(this))
                {
                    Model.FeatureGroups.Add(this);
                }
                if (ModelID != Model.ID)
                {
                    ModelID = Model.ID;
                }
            }
        }
    
        private void FixupChildFeatures(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Feature item in e.NewItems)
                {
                    item.ParentFeatureGroup = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Feature item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentFeatureGroup, this))
                    {
                        item.ParentFeatureGroup = null;
                    }
                }
            }
        }

        #endregion
    }
}
