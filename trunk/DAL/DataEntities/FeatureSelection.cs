//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DAL.DataEntities
{
    public partial class FeatureSelection : IDataEntity
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual int ConfigurationID
        {
            get { return _configurationID; }
            set
            {
                if (_configurationID != value)
                {
                    if (Configuration != null && Configuration.ID != value)
                    {
                        Configuration = null;
                    }
                    _configurationID = value;
                }
            }
        }
        private int _configurationID;
    
        public virtual int FeatureID
        {
            get { return _featureID; }
            set
            {
                if (_featureID != value)
                {
                    if (Feature != null && Feature.ID != value)
                    {
                        Feature = null;
                    }
                    _featureID = value;
                }
            }
        }
        private int _featureID;
    
        public virtual int SelectionStateID
        {
            get { return _selectionStateID; }
            set
            {
                if (_selectionStateID != value)
                {
                    if (SelectionState != null && SelectionState.ID != value)
                    {
                        SelectionState = null;
                    }
                    _selectionStateID = value;
                }
            }
        }
        private int _selectionStateID;
    
        public virtual Nullable<bool> Disabled
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<AttributeValue> AttributeValues
        {
            get
            {
                if (_attributeValues == null)
                {
                    var newCollection = new FixupCollection<AttributeValue>();
                    newCollection.CollectionChanged += FixupAttributeValues;
                    _attributeValues = newCollection;
                }
                return _attributeValues;
            }
            set
            {
                if (!ReferenceEquals(_attributeValues, value))
                {
                    var previousValue = _attributeValues as FixupCollection<AttributeValue>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAttributeValues;
                    }
                    _attributeValues = value;
                    var newValue = value as FixupCollection<AttributeValue>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAttributeValues;
                    }
                }
            }
        }
        private ICollection<AttributeValue> _attributeValues;
    
        public virtual Configuration Configuration
        {
            get { return _configuration; }
            set
            {
                if (!ReferenceEquals(_configuration, value))
                {
                    var previousValue = _configuration;
                    _configuration = value;
                    FixupConfiguration(previousValue);
                }
            }
        }
        private Configuration _configuration;
    
        public virtual SelectionState SelectionState
        {
            get { return _selectionState; }
            set
            {
                if (!ReferenceEquals(_selectionState, value))
                {
                    var previousValue = _selectionState;
                    _selectionState = value;
                    FixupSelectionState(previousValue);
                }
            }
        }
        private SelectionState _selectionState;
    
        public virtual Feature Feature
        {
            get { return _feature; }
            set
            {
                if (!ReferenceEquals(_feature, value))
                {
                    var previousValue = _feature;
                    _feature = value;
                    FixupFeature(previousValue);
                }
            }
        }
        private Feature _feature;

        #endregion
        #region Association Fixup
    
        private void FixupConfiguration(Configuration previousValue)
        {
            if (previousValue != null && previousValue.FeatureSelections.Contains(this))
            {
                previousValue.FeatureSelections.Remove(this);
            }
    
            if (Configuration != null)
            {
                if (!Configuration.FeatureSelections.Contains(this))
                {
                    Configuration.FeatureSelections.Add(this);
                }
                if (ConfigurationID != Configuration.ID)
                {
                    ConfigurationID = Configuration.ID;
                }
            }
        }
    
        private void FixupSelectionState(SelectionState previousValue)
        {
            if (previousValue != null && previousValue.FeatureSelections.Contains(this))
            {
                previousValue.FeatureSelections.Remove(this);
            }
    
            if (SelectionState != null)
            {
                if (!SelectionState.FeatureSelections.Contains(this))
                {
                    SelectionState.FeatureSelections.Add(this);
                }
                if (SelectionStateID != SelectionState.ID)
                {
                    SelectionStateID = SelectionState.ID;
                }
            }
        }
    
        private void FixupFeature(Feature previousValue)
        {
            if (previousValue != null && previousValue.FeatureSelections.Contains(this))
            {
                previousValue.FeatureSelections.Remove(this);
            }
    
            if (Feature != null)
            {
                if (!Feature.FeatureSelections.Contains(this))
                {
                    Feature.FeatureSelections.Add(this);
                }
                if (FeatureID != Feature.ID)
                {
                    FeatureID = Feature.ID;
                }
            }
        }
    
        private void FixupAttributeValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AttributeValue item in e.NewItems)
                {
                    item.FeatureSelection = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AttributeValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.FeatureSelection, this))
                    {
                        item.FeatureSelection = null;
                    }
                }
            }
        }

        #endregion
    }
}
