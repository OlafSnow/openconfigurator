//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DAL.DataEntities
{
    public partial class Feature
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual int ModelID
        {
            get { return _modelID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_modelID != value)
                    {
                        if (Model != null && Model.ID != value)
                        {
                            Model = null;
                        }
                        _modelID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _modelID;
    
        public virtual Nullable<int> ParentFeatureID
        {
            get { return _parentFeatureID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentFeatureID != value)
                    {
                        if (ParentFeature != null && ParentFeature.ID != value)
                        {
                            ParentFeature = null;
                        }
                        _parentFeatureID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _parentFeatureID;
    
        public virtual int FeatureTypeID
        {
            get { return _featureTypeID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_featureTypeID != value)
                    {
                        if (Feature_Type != null && Feature_Type.ID != value)
                        {
                            Feature_Type = null;
                        }
                        _featureTypeID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _featureTypeID;
    
        public virtual Nullable<int> FeatureGroupID
        {
            get { return _featureGroupID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_featureGroupID != value)
                    {
                        if (ParentFeatureGroup != null && ParentFeatureGroup.ID != value)
                        {
                            ParentFeatureGroup = null;
                        }
                        _featureGroupID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _featureGroupID;
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual Nullable<int> LowerBound
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UpperBound
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Attribute> Attributes
        {
            get
            {
                if (_attributes == null)
                {
                    var newCollection = new FixupCollection<Attribute>();
                    newCollection.CollectionChanged += FixupAttributes;
                    _attributes = newCollection;
                }
                return _attributes;
            }
            set
            {
                if (!ReferenceEquals(_attributes, value))
                {
                    var previousValue = _attributes as FixupCollection<Attribute>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAttributes;
                    }
                    _attributes = value;
                    var newValue = value as FixupCollection<Attribute>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAttributes;
                    }
                }
            }
        }
        private ICollection<Attribute> _attributes;
    
        public virtual Feature_Type Feature_Type
        {
            get { return _feature_Type; }
            set
            {
                if (!ReferenceEquals(_feature_Type, value))
                {
                    var previousValue = _feature_Type;
                    _feature_Type = value;
                    FixupFeature_Type(previousValue);
                }
            }
        }
        private Feature_Type _feature_Type;
    
        public virtual ICollection<FeatureGroup> FeatureGroups
        {
            get
            {
                if (_featureGroups == null)
                {
                    var newCollection = new FixupCollection<FeatureGroup>();
                    newCollection.CollectionChanged += FixupFeatureGroups;
                    _featureGroups = newCollection;
                }
                return _featureGroups;
            }
            set
            {
                if (!ReferenceEquals(_featureGroups, value))
                {
                    var previousValue = _featureGroups as FixupCollection<FeatureGroup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFeatureGroups;
                    }
                    _featureGroups = value;
                    var newValue = value as FixupCollection<FeatureGroup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFeatureGroups;
                    }
                }
            }
        }
        private ICollection<FeatureGroup> _featureGroups;
    
        public virtual FeatureGroup ParentFeatureGroup
        {
            get { return _parentFeatureGroup; }
            set
            {
                if (!ReferenceEquals(_parentFeatureGroup, value))
                {
                    var previousValue = _parentFeatureGroup;
                    _parentFeatureGroup = value;
                    FixupParentFeatureGroup(previousValue);
                }
            }
        }
        private FeatureGroup _parentFeatureGroup;
    
        public virtual ICollection<Feature> ChildFeatures
        {
            get
            {
                if (_childFeatures == null)
                {
                    var newCollection = new FixupCollection<Feature>();
                    newCollection.CollectionChanged += FixupChildFeatures;
                    _childFeatures = newCollection;
                }
                return _childFeatures;
            }
            set
            {
                if (!ReferenceEquals(_childFeatures, value))
                {
                    var previousValue = _childFeatures as FixupCollection<Feature>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildFeatures;
                    }
                    _childFeatures = value;
                    var newValue = value as FixupCollection<Feature>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildFeatures;
                    }
                }
            }
        }
        private ICollection<Feature> _childFeatures;
    
        public virtual Feature ParentFeature
        {
            get { return _parentFeature; }
            set
            {
                if (!ReferenceEquals(_parentFeature, value))
                {
                    var previousValue = _parentFeature;
                    _parentFeature = value;
                    FixupParentFeature(previousValue);
                }
            }
        }
        private Feature _parentFeature;
    
        public virtual Model Model
        {
            get { return _model; }
            set
            {
                if (!ReferenceEquals(_model, value))
                {
                    var previousValue = _model;
                    _model = value;
                    FixupModel(previousValue);
                }
            }
        }
        private Model _model;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupFeature_Type(Feature_Type previousValue)
        {
            if (previousValue != null && previousValue.Features.Contains(this))
            {
                previousValue.Features.Remove(this);
            }
    
            if (Feature_Type != null)
            {
                if (!Feature_Type.Features.Contains(this))
                {
                    Feature_Type.Features.Add(this);
                }
                if (FeatureTypeID != Feature_Type.ID)
                {
                    FeatureTypeID = Feature_Type.ID;
                }
            }
        }
    
        private void FixupParentFeatureGroup(FeatureGroup previousValue)
        {
            if (previousValue != null && previousValue.ChildFeatures.Contains(this))
            {
                previousValue.ChildFeatures.Remove(this);
            }
    
            if (ParentFeatureGroup != null)
            {
                if (!ParentFeatureGroup.ChildFeatures.Contains(this))
                {
                    ParentFeatureGroup.ChildFeatures.Add(this);
                }
                if (FeatureGroupID != ParentFeatureGroup.ID)
                {
                    FeatureGroupID = ParentFeatureGroup.ID;
                }
            }
            else if (!_settingFK)
            {
                FeatureGroupID = null;
            }
        }
    
        private void FixupParentFeature(Feature previousValue)
        {
            if (previousValue != null && previousValue.ChildFeatures.Contains(this))
            {
                previousValue.ChildFeatures.Remove(this);
            }
    
            if (ParentFeature != null)
            {
                if (!ParentFeature.ChildFeatures.Contains(this))
                {
                    ParentFeature.ChildFeatures.Add(this);
                }
                if (ParentFeatureID != ParentFeature.ID)
                {
                    ParentFeatureID = ParentFeature.ID;
                }
            }
            else if (!_settingFK)
            {
                ParentFeatureID = null;
            }
        }
    
        private void FixupModel(Model previousValue)
        {
            if (previousValue != null && previousValue.Features.Contains(this))
            {
                previousValue.Features.Remove(this);
            }
    
            if (Model != null)
            {
                if (!Model.Features.Contains(this))
                {
                    Model.Features.Add(this);
                }
                if (ModelID != Model.ID)
                {
                    ModelID = Model.ID;
                }
            }
        }
    
        private void FixupAttributes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Attribute item in e.NewItems)
                {
                    item.Feature = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Attribute item in e.OldItems)
                {
                    if (ReferenceEquals(item.Feature, this))
                    {
                        item.Feature = null;
                    }
                }
            }
        }
    
        private void FixupFeatureGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (FeatureGroup item in e.NewItems)
                {
                    item.ParentFeature = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FeatureGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentFeature, this))
                    {
                        item.ParentFeature = null;
                    }
                }
            }
        }
    
        private void FixupChildFeatures(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Feature item in e.NewItems)
                {
                    item.ParentFeature = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Feature item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentFeature, this))
                    {
                        item.ParentFeature = null;
                    }
                }
            }
        }

        #endregion
    }
}
