@{
    ViewBag.Title = "ModelEditor";
    Layout = "~/Views/Master/_LoggedInLayout.cshtml";
}
@section headerscripts{
    <script type="text/javascript" src="../../Scripts/Pages/ModelEditor.js"></script>
    <script type="text/javascript">
        //General functions~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        var modelId = '@(ViewBag.ModelId)';
        var diagramContext = null;
        var propertiesComponent = null;
        var modelExplorer = null;

        function calcWidth() {
            //Set width for ModelsBox
            var containerWidth = $(".OuterContentArea .InnerContentArea").width();
            var marginWidth = 31;
            var toolboxBoxWidth = $("#ToolBox").width();
            var propertiesBoxWidth = $("#PropertiesBox").width();
            var modelsBoxWidth = containerWidth - marginWidth * 2 - toolboxBoxWidth - propertiesBoxWidth;
            $('#ModelDiagramBox').css("width", modelsBoxWidth + "px");
        }
        function saveData() {
            //Save ModelName
            var name = $("#ModelNameTextbox").val();
            $.ajax({
                type: "POST",
                url: "/ModelEditor/SaveModel",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({ modelId: modelId, name: name }),
                success: function (reponse) {

                    $.pnotify({
                        pnotify_title: "Data saved",
                        pnotify_text: "Model '" + name + "' saved successfully !",
                        pnotify_type: "notice"
                    });

                },
                error: function (req, status, error) {
                    $.pnotify({
                        pnotify_title: "Error!",
                        pnotify_text: "Data could not be saved",
                        pnotify_type: "error"
                    });
                }
            });
        }
        function getDefaultDataObj(type) {
            var returnObj;
            $.ajax({
                url: "/ModelEditor/NewDefault" + type,
                data: {},
                async: false,
                success: function (dataObj) {
                    returnObj = dataObj;
                }
            });
            return returnObj;
        }
        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        //Load~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        $(document).ready(function () {
            //Event handlers-------------------------------------------------------------------

            //Button handlers
            $("#SaveButton").bind("click", function () {
                saveData();
            });
            $("#NewFeatureButton").bind("click", function () {
                var featureObj = getDefaultDataObj("Feature");
                diagramContext.AddFeature(featureObj);
            });
            $("#NewRelationButton").bind("click", function () {
                var relationObj = getDefaultDataObj("Relation");
                diagramContext.AddRelation(relationObj);
            });
            $("#NewGroupRelationButton").bind("click", function () {
                var groupRelationObj = getDefaultDataObj("GroupRelation");
                diagramContext.AddGroupRelation(groupRelationObj);
            });
            $("#NewCompositionRuleButton").bind("click", function () {
                var compositionRuleObj = getDefaultDataObj("CompositionRule");
                diagramContext.AddCompositionRule(compositionRuleObj);
            });

            //Key handlers
            $(document).keydown(function (e) {
                if (e.which == 46) { //del key
                    diagramContext.DeleteElements();
                }
                $.ctrl('F', function () { //create Feature
                    var featureObj = getDefaultDataObj("Feature");
                    diagramContext.AddFeature(featureObj);
                });
                $.ctrl('R', function () { //create Relation
                    var relationObj = getDefaultDataObj("Relation");
                    diagramContext.AddRelation(relationObj);
                });
                $.ctrl('G', function () { //create GroupRelation
                    var groupRelationObj = getDefaultDataObj("GroupRelation");
                    diagramContext.AddGroupRelation(groupRelationObj);
                });
                $.ctrl('M', function () { //create CompositionRule
                    var compositionRuleObj = getDefaultDataObj("CompositionRule");
                    diagramContext.AddCompositionRule(compositionRuleObj);
                    return false;
                });
            });
            //---------------------------------------------------------------------------------

            //Initialize 
            calcWidth();
            calcWidth();
            $(window).resize(function () {
                calcWidth();
                calcWidth();
            });

            //Load data
            $("#ModelDiagramBox").block({ message: "Loading diagram...", fadeIn: 300 });
            $.timer(300, function () {

                //Instantiate/Initialize controls
                diagramContext = new DiagramContext($("#SVGCanvas")[0]);
                diagramContext.Initialize();
                propertiesComponent = new PropertiesComponent($("#PropertiesBox"), diagramContext);
                modelExplorer = new ModelExplorer($("#ModelExplorerTree"));
                modelExplorer.Initialize();

                //Event handlers------------------------------------------------------------------------
                var eventHandlers = {
                    diagramEvents: {
                        OnElementAdded: function (UIElement) {
                            var elemType = UIElement.GetTypeName();
                            switch (elemType) {
                                case "feature":
                                    modelExplorer.AddFeatureToTree(UIElement);
                                    break;
                            }
                        },
                        OnElementSelected: function (UIElement) {
                            propertiesComponent.LoadProperties(UIElement);

                            var elemType = UIElement.GetTypeName();
                            switch (elemType) {
                                case "feature":
                                    modelExplorer.SelectFeatureInTree(UIElement);
                                    break;
                            }
                        },
                        OnElementUpdated: function (UIElement) {
                            var elemType = UIElement.GetTypeName();
                            switch (elemType) {
                                case "feature":
                                    modelExplorer.UpdateFeatureInTree(UIElement);
                                    break;
                            }
                        },
                        OnElementEdited: function (UIElement) {
                            var elemType = UIElement.GetTypeName();
                            switch (elemType) {
                                case "feature":
                                    modelExplorer.UpdateFeatureInTree(UIElement);
                                    break;
                            }
                        },
                        OnElementDeselected: function (UIElement) {
                            propertiesComponent.Clear();
                            modelExplorer.DeselectAll();
                        },
                        OnAllElementsDeselected: function (UIElement) {
                            propertiesComponent.Clear();
                            modelExplorer.DeselectAll();
                        },
                        OnElementDeleted: function (UIElement) {
                            modelExplorer.DeleteFeatureInTree(UIElement);
                        }
                    }
                }
                //Set event handlers
                for (var eventName in eventHandlers.diagramEvents) {
                    var eventHandler = eventHandlers.diagramEvents[eventName];
                    diagramContext[eventName].Add(new EventHandler(eventHandler));
                }
                //-------------------------------------------------------------------------------------

                //
                $("#ModelDiagramBox").unblock();
            });
        });
        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    </script>
}
@section SubPageItem{
    <div class="MenuItemSeparator">
        ></div>
    <div id="ModelMenuBar">
        <input id="ModelNameTextbox" class="Textbox" type="text" value="@ViewBag.ModelName" />
        <div class="Button-Toolbar" id="SaveButton">
            <img src="../../Content/themes/base/images/Icons/save-toolbar.png" />
            <span>Save</span>
        </div>
        <div class="Button-Toolbar" id="UndoButton">
            <img src="../../Content/themes/base/images/Icons/undo-toolbar.png" />
            <span>Undo</span>
        </div>
        <div class="Button-Toolbar" id="RedoButton">
            <img src="../../Content/themes/base/images/Icons/redo-toolbar.png" />
            <span>Redo</span>
        </div>
    </div>
}
<div class="LeftColumn">
    @*Toolbox*@
    <div id="ToolBox" class="RoundedBox">
        <div class="BoxHeader">
            <div class="BoxInnerHeader">
                <span class="HeaderLabel">Toolbox</span>
            </div>
        </div>
        <div class="BoxContent">
            <ul class="ActionList">
                <li class="Button-Normal" id="NewFeatureButton">
                    <img src="../../Content/themes/base/images/Icons/Toolbox/feature.png" />
                    <span><span class="underline">F</span>eature</span> </li>
                <li class="Button-Normal" id="NewRelationButton">
                    <img src="../../Content/themes/base/images/Icons/Toolbox/relation.png" />
                    <span><span class="underline">R</span>elation</span> </li>
                <li class="Button-Normal" id="NewGroupRelationButton">
                    <img src="../../Content/themes/base/images/Icons/Toolbox/grouprelation.png" />
                    <span><span class="underline">G</span>roup Relation</span> </li>
                <li class="Button-Normal" id="NewCompositionRuleButton">
                    <img src="../../Content/themes/base/images/Icons/Toolbox/compositionrule.png" />
                    <span>Co<span class="underline">m</span>position Rule</span> </li>
                <li class="Button-Normal" id="NewCustomRuleButton">
                    <img src="../../Content/themes/base/images/Icons/Toolbox/customrule.png" />
                    <span>C<span class="underline">u</span>stom Rule</span> </li>
            </ul>
        </div>
        <div class="BoxFooter">
            <div class="BoxInnerFooter">
            </div>
        </div>
    </div>
    @*ModelExplorerBox*@
    <div id="ModelExplorerBox" class="RoundedBox">
        <div class="BoxHeader">
            <div class="BoxInnerHeader">
                <span class="HeaderLabel">Model Explorer</span>
            </div>
        </div>
        <div class="BoxContent">
            <div class="TreeArea">
                <div id="ModelExplorerTree">
                </div>
            </div>
        </div>
        <div class="BoxFooter">
            <div class="BoxInnerFooter">
            </div>
        </div>
    </div>
</div>
<div class="RightColumn">
    @*Properties*@
    <div id="PropertiesBox" class="RoundedBox">
        <div class="BoxHeader">
            <div class="BoxInnerHeader">
                <span class="HeaderLabel">Properties - <span id="SetTypeLabel"></span></span>
            </div>
        </div>
        <div class="BoxContent">
            <div id="MainContainer">
            </div>
        </div>
        <div class="BoxFooter">
            <div class="BoxInnerFooter">
            </div>
        </div>
    </div>
</div>
<div class="CenterColumn">
    @*ModelDiagram*@
    <div id="ModelDiagramBox" class="RoundedBox">
        <div class="BoxHeader">
            <div class="BoxInnerHeader">
                <span class="HeaderLabel">Model Diagram</span>
            </div>
        </div>
        <div class="BoxContent">
            <div id="SVGCanvasWrapper">
                <div id="SVGCanvas">
                </div>
            </div>
        </div>
        <div class="BoxFooter">
            <div class="BoxInnerFooter">
            </div>
        </div>
    </div>
</div>
